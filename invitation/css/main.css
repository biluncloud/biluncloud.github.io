html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
    font-family: Georgia, serif;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
    display: block;
}

body {
    line-height: 1;
}

ol, ul {
    list-style: none;
}
blockquote, q {
    quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
    content: '';
    content: none;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}

/*.antialias {
    -webkit-transform: translate3d(0,0,0);
    -moz-transform: translate3d(0,0,0);
    transform: translate3d(0,0,0);
}
*/

body {
    min-height: 740px;
    
    background: rgb(215, 215, 215);
    background: -webkit-gradient(radial, 50% 50%, 0, 50% 50%, 500, from(rgb(240, 240, 240)), to(rgb(190, 190, 190)));
    background: -webkit-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:    -moz-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:     -ms-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:      -o-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:         radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
}

/*
    Now let's bring some text styles back ...
*/
b, strong { 
    font-weight: bold;
    font-family: "Arial", "Helvetica", "sans-serif", "微软雅黑", "Microsoft YaHei", "黑体";
}
i, em { font-style: italic }

/*
    ... and give links a nice look.
*/
a {
    color: inherit;
    text-decoration: none;
    padding: 0 0.1em;
    background: rgba(255,255,255,0.5);
    text-shadow: -1px -1px 2px rgba(100,100,100,0.9);
    border-radius: 0.2em;

    -webkit-transition: 0.5s;
    -moz-transition:    0.5s;
    -ms-transition:     0.5s;
    -o-transition:      0.5s;
    transition:         0.5s;
}

a:hover,
a:focus {
    background: rgba(255,255,255,1);
    text-shadow: -1px -1px 2px rgba(100,100,100,0.5);
}

/*
    Because the main point behind the impress.js demo is to demo impress.js
    we display a fallback message for users with browsers that don't support
    all the features required by it.
    
    All of the content will be still fully accessible for them, but I want
    them to know that they are missing something - that's what the demo is
    about, isn't it?
    
    And then we hide the message, when support is detected in the browser.
*/

.fallback-message {
    line-height: 1.3;
    
    width: 780px;
    padding: 10px 10px 0;
    margin: 20px auto;

    border: 1px solid #E4C652;
    border-radius: 10px;
    background: #EEDC94;
}

.fallback-message p {
    margin-bottom: 10px;
}

.impress-supported .fallback-message {
    display: none;
}

/*
    Now let's style the presentation steps.
    
    We start with basics to make sure it displays correctly in everywhere ...
*/

.step {
    position: relative;
    /*width: 900px;
    padding: 40px;*/
    /*margin: 20px auto;*/
    /* The background size*/
    width: 1024px; 
    height: 768px;

    -webkit-box-sizing: border-box;
    -moz-box-sizing:    border-box;
    -ms-box-sizing:     border-box;
    -o-box-sizing:      border-box;
    box-sizing:         border-box;

    display: none; /* Start by not showing slides to prevent mobile Crash at the start */
}

.desktop .step { display:block; } /* Desktops should be able to handle all slides */
.step.active,.step.present,.step.active + .step,.step.prev { display:block; } /* Limit mobile to only show the current slide, the next slide, and the previous slide */

.impress-enabled .strut-slide-overview .step {
    opacity: 1;
}

/*
    ... and we enhance the styles for impress.js.
    
    Basically we remove the margin and make inactive steps a little bit transparent.
*/
.impress-enabled .step {
    margin: 0;
    opacity: 0.3;

    -webkit-transition: opacity 1s;
    -moz-transition:    opacity 1s;
    -ms-transition:     opacity 1s;
    -o-transition:      opacity 1s;
    transition:         opacity 1s;
}

.impress-enabled .step.active { opacity: 1 }

/*
    These 'slide' step styles were heavily inspired by HTML5 Slides:
    http://html5slides.googlecode.com/svn/trunk/styles.css

    ;)

    They cover everything what you see on first three steps of the demo.
*/
.slide {
    display: block;

    width: 900px;
    height: 700px;
    padding: 40px 60px;

    background-color: white;
    border: 1px solid rgba(0, 0, 0, .3);
    border-radius: 10px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, .1);

    color: rgb(102, 102, 102);
    text-shadow: 0 2px 2px rgba(0, 0, 0, .1);

    font-size: 30px;
    line-height: 36px;
    letter-spacing: -1px;
}

.slide q {
    display: block;
    font-size: 50px;
    line-height: 72px;

    margin-top: 100px;
}

.slide q strong {
    white-space: nowrap;
}

/*
    And now we start to style each step separately.

    I agree that this may be not the most efficient, object-oriented and
    scalable way of styling, but most of steps have quite a custom look
    and typography tricks here and there, so they had to be styled separately.

    First is the title step with a big <h1> (no room for padding) and some
    3D positioning along Z axis.
*/



/*
    The last step is an overview.
    There is no content in it, so we make sure it's not visible because we want
    to be able to click on other steps.

*/
#overview { display: none }

/*
    We also make other steps visible and give them a pointer cursor using the
    `impress-on-` class.
*/
.impress-on-overview .step {
    opacity: 1;
    cursor: pointer;
}


/*
    Now, when we have all the steps styled let's give users a hint how to navigate
    around the presentation.
    
    The best way to do this would be to use JavaScript, show a delayed hint for a
    first time users, then hide it and store a status in cookie or localStorage...
    
    But I wanted to have some CSS fun and avoid additional scripting...
    
    Let me explain it first, so maybe the transition magic will be more readable
    when you read the code.
    
    First of all I wanted the hint to appear only when user is idle for a while.
    You can't detect the 'idle' state in CSS, but I delayed a appearing of the
    hint by 5s using transition-delay.
    
    You also can't detect in CSS if the user is a first-time visitor, so I had to
    make an assumption that I'll only show the hint on the first step. And when
    the step is changed hide the hint, because I can assume that user already
    knows how to navigate.
    
    To summarize it - hint is shown when the user is on the first step for longer
    than 5 seconds.
    
    The other problem I had was caused by the fact that I wanted the hint to fade
    in and out. It can be easily achieved by transitioning the opacity property.
    But that also meant that the hint was always on the screen, even if totally 
    transparent. It covered part of the screen and you couldn't correctly clicked
    through it.
    Unfortunately you cannot transition between display `block` and `none` in pure
    CSS, so I needed a way to not only fade out the hint but also move it out of
    the screen.
    
    I solved this problem by positioning the hint below the bottom of the screen
    with CSS transform and moving it up to show it. But I also didn't want this move
    to be visible. I wanted the hint only to fade in and out visually, so I delayed
    the fade in transition, so it starts when the hint is already in its correct
    position on the screen.
    
    I know, it sounds complicated ... maybe it would be easier with the code?
*/

.hint {
    /*
        We hide the hint until presentation is started and from browsers not supporting
        impress.js, as they will have a linear scrollable view ...
    */
    display: none;
    
    /*
        ... and give it some fixed position and nice styles.
    */
    position: fixed;
    left: 0;
    right: 0;
    bottom: 200px;
    
    background: rgba(0,0,0,0.5);
    color: #EEE;
    text-align: center;
    
    font-size: 50px;
    padding: 20px;
    
    z-index: 100;
    
    /*
        By default we don't want the hint to be visible, so we make it transparent ...
    */
    opacity: 0;
    
    /*
        ... and position it below the bottom of the screen (relative to it's fixed position)
    */
    -webkit-transform: translateY(400px);
    -moz-transform:    translateY(400px);
    -ms-transform:     translateY(400px);
    -o-transform:      translateY(400px);
    transform:         translateY(400px);

    /*
        Now let's imagine that the hint is visible and we want to fade it out and move out
        of the screen.
        
        So we define the transition on the opacity property with 1s duration and another
        transition on transform property delayed by 1s so it will happen after the fade out
        on opacity finished.
        
        This way user will not see the hint moving down.
    */
    -webkit-transition: opacity 1s, -webkit-transform 0.5s 1s;
    -moz-transition:    opacity 1s,    -moz-transform 0.5s 1s;
    -ms-transition:     opacity 1s,     -ms-transform 0.5s 1s;
    -o-transition:      opacity 1s,      -o-transform 0.5s 1s;
    transition:         opacity 1s,         transform 0.5s 1s;
}

/*
    Now we 'enable' the hint when presentation is initialized ...
*/
.impress-enabled .hint { display: block }

/*
    ... and we will show it when the first step (with id 'bored') is active.
*/
.impress-on-step-1 .hint {
    /*
        We remove the transparency and position the hint in its default fixed
        position.
    */
    opacity: 1;
    
    -webkit-transform: translateY(0px);
    -moz-transform:    translateY(0px);
    -ms-transform:     translateY(0px);
    -o-transform:      translateY(0px);
    transform:         translateY(0px);
    
    /*
        Now for fade in transition we have the oposite situation from the one
        above.
        
        First after 4.5s delay we animate the transform property to move the hint
        into its correct position and after that we fade it in with opacity 
        transition.
    */
    -webkit-transition: opacity 1s 5s, -webkit-transform 0.5s 2.5s;
    -moz-transition:    opacity 1s 5s,    -moz-transform 0.5s 2.5s;
    -ms-transition:     opacity 1s 5s,     -ms-transform 0.5s 2.5s;
    -o-transition:      opacity 1s 5s,      -o-transform 0.5s 2.5s;
    transition:         opacity 1s 5s,         transform 0.5s 2.5s;
}

/*
    And as the last thing there is a workaround for quite strange bug.
    It happens a lot in Chrome. I don't remember if I've seen it in Firefox.
    
    Sometimes the element positioned in 3D (especially when it's moved back
    along Z axis) is not clickable, because it falls 'behind' the <body>
    element.
    
    To prevent this, I decided to make <body> non clickable by setting 
    pointer-events property to `none` value.
    Value if this property is inherited, so to make everything else clickable
    I bring it back on the #impress element.
    
    If you want to know more about `pointer-events` here are some docs:
    https://developer.mozilla.org/en/CSS/pointer-events
    
    There is one very important thing to notice about this workaround - it makes
    everything 'unclickable' except what's in #impress element.
    
    So use it wisely ... or don't use at all.
*/
.impress-enabled          { pointer-events: none }
.impress-enabled #impress { pointer-events: auto }

/*
    There is one funny thing I just realized.
    
    Thanks to this workaround above everything except #impress element is invisible
    for click events. That means that the hint element is also not clickable.
    So basically all of this transforms and delayed transitions trickery was probably
    not needed at all...
    
    But it was fun to learn about it, wasn't it?
*/

/*
    That's all I have for you in this file.
    Thanks for reading. I hope you enjoyed it at least as much as I enjoyed writing it
    for you.
*/

/* this is for baidu map */
.iw_poi_title {
    color:#CC5522;
    font-size:14px;
    font-weight:bold;
    overflow:hidden;
    padding-right:13px;
    white-space:nowrap
}
.iw_poi_content {
    font:12px arial,sans-serif;
    overflow:visible;
    padding-top:4px;
    white-space:-moz-pre-wrap;
    word-wrap:break-word
}

.innerBg {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
    width: 100%;
    height: 100%;

    -webkit-transition: background-color .8s ease;
    -moz-transition: background-color .8s ease;
    -ms-transition: background-color .8s ease;
    transition: background-color .8s ease;
}

.step > * {
    position: absolute;
    line-height: normal;
    -webkit-transform-origin: left top;
    -moz-transform-origin: left top;
    -ms-transform-origin: left top;
    transform-origin: left top;
}

#impress {
    position: absolute;
    transform-origin: left top 0px;
    transition: all 0ms ease-in-out 0ms;
    transform-style: preserve-3d;
    top: 50%;
    left: 50%;
    transform: perspective(2000px) scale(0.5);
}

#container {
    position: absolute;
    transform-origin: left top 0px;
    transition: all 0ms ease-in-out 0ms;
    transform-style: preserve-3d;
    transform: rotateZ(0deg) rotateY(0deg) rotateX(0deg) translate3d(-9434.45px, -6696.96px, 0px);
}

#step-1 img {
    top: 0px; 
    left: 235px; 
}

#step-2 img {
    top: -2px; 
    left: -164px; 
    width: 1361px; 
    height: 766.58px;
}

#step-3 img {
    top: -2px;
    left: -158px;
    width: 1357px; 
    height: 764.33px;
}

#step-4 .cn1 {
    top: 296px;
    left: 303px;
    font-size: 96px;
}
#step-4 .cn2 {
    top: 317px;
    left: 540px;
    font-size: 30px;
    font-family: "Arial", "Helvetica", "sans-serif";
}

#step-5 .cn1 {
    top: 82px; 
    left: 116px;
    font-size: 72px;
}
#step-5 .cn2 {
    top: 190px; 
    left: 115px;
    font-size: 38px;
}
#step-5 .cn3 {
    top: 243px;
    left: 238px;
    font-size: 30px;
}
#dituContent {
    top: 100px;
    left: 350px;
    width:697px;
    height:550px;
    border:#ccc solid 1px;
}

#step-6 img {
    top: 0px; 
    left: 394px; 
    width: 513px; 
    height: 769.5px;
}
#step-6 .cn {
    top: 238px;
    left: 281px;
    font-size: 27px;
}
#step-6 .en {
    top: 240px;
    left: 271px;
    -webkit-transform: rotate(1.57rad)  ;
    -moz-transform: rotate(1.57rad)  ;
    transform: rotate(1.57rad)  ;
    font-size: 24px;
}

#step-7 .cn {
    top: 260px;
    left: 764px;
    font-size: 27px;
}
#step-7 .en {
    top: 262px;
    left: 754px;
    -webkit-transform: rotate(1.57rad)  ;
    -moz-transform: rotate(1.57rad)  ;
    transform: rotate(1.57rad)  ;
    font-size: 24px;
}

#step-8 img {
    top: 22px;
    left: -9px;
    width: 1047px; height: 698px;
}

#step-9 .cn {
    top: 256px;
    left: 229px;
    font-size: 27px;
}
#step-9 .en {
    top: 258px;
    left: 219px;
    -webkit-transform: rotate(1.57rad)  ;
    -moz-transform: rotate(1.57rad)  ;
    transform: rotate(1.57rad)  ;
    font-size: 24px;
}

#step-10 .cn {
    top: 250px;
    left: 229px;
    font-size: 27px;
}
#step-10 .en {
    top: 252px; 
    left: 219px; 
    -webkit-transform: rotate(1.57rad)  ;
    -moz-transform: rotate(1.57rad)  ;
    transform: rotate(1.57rad)  ;
    font-size: 24px;
}
#step-10 img {
    top: -1px;
    left: 375px;
    width: 542px; 
    height: 769.35px;
}

#step-11 img {
    top: 106px;
    left: 254px;
    width: 768px; height: 551.08px;
}
#step-11 .cn1 {
    top: 207px; 
    left: 116px;
    font-size: 27px;
}
#step-11 .cn2 {
    top: 275px;
    left: 156px;
    font-size: 27px;
}
#step-11 .en {
    top: 209px; 
    left: 106px; 
    -webkit-transform: rotate(1.57rad)  ; 
    -moz-transform: rotate(1.57rad)  ; 
    transform: rotate(1.57rad)  ;
    font-size: 24px;
}

#step-12 img {
    top: 50px; 
    left: 0px; 
    width: 877px; 
    height: 659.5px;
}
#step-12 .cn {
    top: 238px; 
    left: 921px;
    font-size: 27px;
}
#step-12 .en {
    top: 240px; 
    left: 911px; 
    -webkit-transform: rotate(1.57rad)  ;
    -moz-transform: rotate(1.57rad)  ;
    transform: rotate(1.57rad)  ;
    font-size: 24px;
}

#step-13 {
    width: 1100px; 
}
#step-13 img {
    top: 94px; 
    left: 1px; 
    width: 789px; 
    height: 566.15px;
}
#step-13 .cn1 {
    top: 317px; 
    left: 826px;
    font-size: 27px;
}
#step-13 .cn2 {
    top: 408px; 
    left: 859px;
    font-size: 27px;
}
#step-13 .en {
    top: 440px; 
    left: 770px; 
    -webkit-transform: rotate(1.57rad)  ; 
    -moz-transform: rotate(1.57rad)  ; 
    transform: rotate(1.57rad)  ;
    font-size: 24px;
}

#step-14 img {
    top: 63px; 
    left: 183px; 
    width: 839px; 
    height: 630.93px;
}
#step-14 .cn1 {
    top: 283px; 
    left: 83px; 
    font-size: 27px;
}
#step-14 .cn2 {
    top: 337px; 
    left: 115px; 
    font-size: 27px;
}
#step-14 .en {
    top: 402px; 
    left: -81px; 
    -webkit-transform: rotate(1.57rad)  ; 
    -moz-transform: rotate(1.57rad)  ; 
    transform: rotate(1.57rad)  ;
    font-size: 24px;
}

#step-15 img {
    top: 3px; 
    left: 2px; 
    width: 924px; height: 663.02px
}
#step-15 .cn1 {
    top: 577px; 
    left: 30px;
    font-size: 27px;
}
#step-15 .cn2 {
    top: 604px; 
    left: 102px; 
    font-size: 27px;
}
#step-15 .en1 {
    top: 672px; 
    left: 403px;
    font-size: 24px;
}
#step-15 .en2 {
    top: 702px; 
    left: 481px;
    font-size: 24px;
}

#step-16 {
    color:#eeeeee
}
#step-16 img {
    top: 5px; 
    left: -4px; 
    width: 1030px; height: 749.9px;
}
#step-16 .cn1 {
    top: 83px; 
    left: 733px;
    font-size: 27px;
}
#step-16 .cn2 {
    top: 130px; 
    left: 765px; 
    font-size: 27px;
}
#step-16 .en {
    top: 207px; 
    left: 684px; 
    -webkit-transform: rotate(1.57rad); 
    -moz-transform: rotate(1.57rad); 
    transform: rotate(1.57rad); 
    font-size: 24px;
}

#step-17 img {
    top: 68px; 
    left: 129px; 
    width: 893px; height: 640.78px;
}
#step-17 .cn1 {
    top: 285px; 
    left: 58px; 
    font-size: 27px;
}
#step-17 .cn2 {
    top: 334px; 
    left: 95px; 
    font-size: 27px;
}
#step-17 .en {
    top: 452px; 
    left: -25px; 
    -webkit-transform: rotate(1.57rad)  ; 
    -moz-transform: rotate(1.57rad)  ; 
    transform: rotate(1.57rad)  ; 
    font-size: 24px;
}

#step-18 img {
    top: 65px; 
    left: 148px; 
    width: 875px; 
    height: 627.86px;
}
#step-18 .en {
    top: 462px; 
    left: -92px; 
    -webkit-transform: rotate(1.57rad)  ; 
    -moz-transform: rotate(1.57rad)  ; 
    transform: rotate(1.57rad)  ; 
    font-size: 24px;
}
#step-18 .cn {
    top: 274px; 
    left: 50px; 
    font-size: 27px;
}

#step-19 img {
    top: 16px; 
    left: 1px; 
    width: 1020px; height: 731.91px;
}
#step-19 .sign {
    top: 34px; 
    left: 424px; 
    font-size: 24px;
}
#step-19 .cn1 {
    top: 101px; 
    left: 416px; 
    font-size: 27px;
}
#step-19 .cn2 {
    top: 187px; 
    left: 387px; 
    font-size: 27px;
}
#step-19 .cn3 {
    top: 244px; 
    left: 417px; 
    font-size: 27px;
}
#step-19 .en {
    top: 196px; 
    left: 349px; 
    -webkit-transform: rotate(1.57rad)  ; 
    -moz-transform: rotate(1.57rad)  ; 
    transform: rotate(1.57rad)  ; 
    font-size: 24px;
}

#step-20 img {
    top: 9px; 
    left: 0px; 
    width: 1024px; 
    height: 734.78px;
}
#step-20 .cn {
    top: 617px; 
    left: 805px; 
    font-size: 27px;
}
#step-20 .en {
    top: 655px; 
    left: 710px; 
    font-size: 24px;
}

#step-21 img {
    top: 3px; 
    left: 244px; 
}

#disqus_thread {
    top: 3px; 
    left: 544px; 
    width: 500px; 
}

#overview {
}

